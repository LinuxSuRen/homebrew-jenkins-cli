# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Jcli < Formula
  desc "Jenkins CLI allows you manage your Jenkins as an easy way"
  homepage "https://github.com/jenkins-zh/jenkins-cli"
  version "0.0.41"

  depends_on "vim" => :optional
  depends_on "bash-completion" => :optional

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/jenkins-zh/jenkins-cli/releases/download/v0.0.41/jcli-darwin-amd64.tar.gz"
      sha256 "788a4fa491dcd07e7361e7f1b498d12d2b25ff0a80998135c38f16c1ab804b27"

      def install
        bin.install name

        # Install bash completion
        output = Utils.popen_read("#{bin}/jcli completion")
        (bash_completion/"jcli").write output

        # Install zsh completion
        output = Utils.popen_read("#{bin}/jcli completion --type zsh")
        (zsh_completion/"_jcli").write output

        (Pathname.pwd/"man").mkpath
        system "#{bin}/jcli", "doc", "--doc-type", "ManPage", "man"
        man1.install Dir["man/*.1"]

        prefix.install_metafiles
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/jenkins-zh/jenkins-cli/releases/download/v0.0.41/jcli-darwin-arm64.tar.gz"
      sha256 "f5ad2f5316a14d2579ba5b896bb45b8ec748e7a598c061a00d5c13a94a5aab39"

      def install
        bin.install name

        # Install bash completion
        output = Utils.popen_read("#{bin}/jcli completion")
        (bash_completion/"jcli").write output

        # Install zsh completion
        output = Utils.popen_read("#{bin}/jcli completion --type zsh")
        (zsh_completion/"_jcli").write output

        (Pathname.pwd/"man").mkpath
        system "#{bin}/jcli", "doc", "--doc-type", "ManPage", "man"
        man1.install Dir["man/*.1"]

        prefix.install_metafiles
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/jenkins-zh/jenkins-cli/releases/download/v0.0.41/jcli-linux-amd64.tar.gz"
      sha256 "c571e71fc388cba9fe358f37014a89ee12da222216cddd669026e9d9ce07ce4e"

      def install
        bin.install name

        # Install bash completion
        output = Utils.popen_read("#{bin}/jcli completion")
        (bash_completion/"jcli").write output

        # Install zsh completion
        output = Utils.popen_read("#{bin}/jcli completion --type zsh")
        (zsh_completion/"_jcli").write output

        (Pathname.pwd/"man").mkpath
        system "#{bin}/jcli", "doc", "--doc-type", "ManPage", "man"
        man1.install Dir["man/*.1"]

        prefix.install_metafiles
      end
    end
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/jenkins-zh/jenkins-cli/releases/download/v0.0.41/jcli-linux-arm64.tar.gz"
      sha256 "ebd88cf3840725292a0a08aedca15b7fc6ded005d4475cada3dbf646f634bc0a"

      def install
        bin.install name

        # Install bash completion
        output = Utils.popen_read("#{bin}/jcli completion")
        (bash_completion/"jcli").write output

        # Install zsh completion
        output = Utils.popen_read("#{bin}/jcli completion --type zsh")
        (zsh_completion/"_jcli").write output

        (Pathname.pwd/"man").mkpath
        system "#{bin}/jcli", "doc", "--doc-type", "ManPage", "man"
        man1.install Dir["man/*.1"]

        prefix.install_metafiles
      end
    end
  end

  test do
    version_output = shell_output("#{bin}/jcli version")
    assert_match version.to_s, version_output
  end
end
