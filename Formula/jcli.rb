# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Jcli < Formula
  desc "Jenkins CLI allows you manage your Jenkins as an easy way"
  homepage "https://github.com/jenkins-zh/jenkins-cli"
  version "0.0.40"

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/jenkins-zh/jenkins-cli/releases/download/v0.0.40/jcli-darwin-amd64.tar.gz"
      sha256 "0ffe4d8fb643cec580812cb5f7fec394826bd06e00354ac9a2a2774bf063eeff"

      def install
        bin.install name

        # Install bash completion
        output = Utils.popen_read("#{bin}/jcli completion")
        (bash_completion/"jcli").write output

        # Install zsh completion
        output = Utils.popen_read("#{bin}/jcli completion --type zsh")
        (zsh_completion/"_jcli").write output

        (Pathname.pwd/"man").mkpath
        system "#{bin}/jcli", "doc", "--doc-type", "ManPage", "man"
        man1.install Dir["man/*.1"]

        prefix.install_metafiles
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/jenkins-zh/jenkins-cli/releases/download/v0.0.40/jcli-darwin-arm64.tar.gz"
      sha256 "5212d4f22812aeec3871dd31ba9805a3bbca75563b536b6c14c339669b043e6f"

      def install
        bin.install name

        # Install bash completion
        output = Utils.popen_read("#{bin}/jcli completion")
        (bash_completion/"jcli").write output

        # Install zsh completion
        output = Utils.popen_read("#{bin}/jcli completion --type zsh")
        (zsh_completion/"_jcli").write output

        (Pathname.pwd/"man").mkpath
        system "#{bin}/jcli", "doc", "--doc-type", "ManPage", "man"
        man1.install Dir["man/*.1"]

        prefix.install_metafiles
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/jenkins-zh/jenkins-cli/releases/download/v0.0.40/jcli-linux-arm64.tar.gz"
      sha256 "d2dcd144fbe9bd13d64c20660ce6d967e54aa467f50d39350e317ca3f65d70b2"

      def install
        bin.install name

        # Install bash completion
        output = Utils.popen_read("#{bin}/jcli completion")
        (bash_completion/"jcli").write output

        # Install zsh completion
        output = Utils.popen_read("#{bin}/jcli completion --type zsh")
        (zsh_completion/"_jcli").write output

        (Pathname.pwd/"man").mkpath
        system "#{bin}/jcli", "doc", "--doc-type", "ManPage", "man"
        man1.install Dir["man/*.1"]

        prefix.install_metafiles
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/jenkins-zh/jenkins-cli/releases/download/v0.0.40/jcli-linux-amd64.tar.gz"
      sha256 "54b4c9136bba93b3a7d53c67fab79e58681f87354b6cc6c5952d391fc80e063c"

      def install
        bin.install name

        # Install bash completion
        output = Utils.popen_read("#{bin}/jcli completion")
        (bash_completion/"jcli").write output

        # Install zsh completion
        output = Utils.popen_read("#{bin}/jcli completion --type zsh")
        (zsh_completion/"_jcli").write output

        (Pathname.pwd/"man").mkpath
        system "#{bin}/jcli", "doc", "--doc-type", "ManPage", "man"
        man1.install Dir["man/*.1"]

        prefix.install_metafiles
      end
    end
  end

  depends_on "vim" => :optional
  depends_on "bash-completion" => :optional

  test do
    version_output = shell_output("#{bin}/jcli version")
    assert_match version.to_s, version_output
  end
end
