# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Jcli < Formula
  desc "Jenkins CLI allows you manage your Jenkins as an easy way"
  homepage "https://github.com/jenkins-zh/jenkins-cli"
  version "0.0.35"
  bottle :unneeded

  if OS.mac? && Hardware::CPU.intel?
    url "https://github.com/jenkins-zh/jenkins-cli/releases/download/v0.0.35/jcli-darwin-amd64.tar.gz"
    sha256 "12cd78a5c890b3db43b1522b0bb0ba1644b49686ec4cbc91abc4411e37cbfc42"
  end
  if OS.linux? && Hardware::CPU.intel?
    url "https://github.com/jenkins-zh/jenkins-cli/releases/download/v0.0.35/jcli-linux-amd64.tar.gz"
    sha256 "405fd6362e5d6dfb6faae2a2d679b6a2c9ec6a785a0f9791f0d31035acd75c47"
  end
  if OS.linux? && Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
    url "https://github.com/jenkins-zh/jenkins-cli/releases/download/v0.0.35/jcli-linux-arm64.tar.gz"
    sha256 "ce15f6f985b0560f4e41961a7d906577ffc2be1d84b33993357b26f91b08c445"
  end

  depends_on "vim" => :optional
  depends_on "bash-completion" => :optional

  def install
    bin.install name

    # Install bash completion
    output = Utils.popen_read("#{bin}/jcli completion")
    (bash_completion/"jcli").write output

    # Install zsh completion
    output = Utils.popen_read("#{bin}/jcli completion --type zsh")
    (zsh_completion/"_jcli").write output

    (Pathname.pwd/"man").mkpath
    system "#{bin}/jcli", "doc", "--doc-type", "ManPage", "man"
    man1.install Dir["man/*.1"]

    prefix.install_metafiles
  end

  test do
    version_output = shell_output("#{bin}/jcli version")
    assert_match version.to_s, version_output
  end
end
